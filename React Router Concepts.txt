What is React Router
https://codesandbox.io/s/1vvy3mqrvl
React Router is a third party library that is used to handle the routing needs of your React application. With React Router, you can easily render different components based on the path of your URL. Take a look at this simple example that shows off what React Router can do:

const BasicExample = () => (
  <Router>
    <div>
      <ul>
        <li><Link to="/">Home</Link></li>
        <li><Link to="/about">About</Link></li>
        <li><Link to="/users">Users</Link></li>
      </ul>

      <hr/>

      <Route exact path="/" component={Home}/>
      <Route path="/about" component={About}/>
      <Route path="/users" component={Users}/>
    </div>
  </Router>
)
----------------------------------------------------------------------------------
Setting up React Router locally
If you haven't already done so, install create-react-app and then create a new React project:

npm install -g create-react-app
create-react-app project-name
cd project-name
React Router does not come installed with React, so we must install it with:

npm install `react-router-dom` 
After that, you can import the React Router components into your app.js file:


import React from 'react'
import { render } from "react-dom"
import {
  BrowserRouter as Router,
  Route,
  Link
} from 'react-router-dom'

//...

Try copying and pasting this basic example into app.js to get started:

import React from "react";
import { render } from "react-dom";
import { BrowserRouter, Route, Link } from "react-router-dom";

const Home = () => <div>Home</div>;
const About = () => <div>About</div>;
const Users = ({ match }) => <div>{match.url}</div>;

const App = () => (
  <BrowserRouter>
    <div>
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        <li>
          <Link to="/about">About</Link>
        </li>
        <li>
          <Link to="/users">Users</Link>{" "}
        </li>
      </ul>
      <hr />
      <Route exact path="/" component={Home} />
      <Route path="/about" component={About} />
      <Route path="/users" component={Users} />
    </div>
  </BrowserRouter>
);

export default App;
----------------------------------------------------------------------------------
Routers and Routes

BrowserRouter
The BrowserRouter component is a wrapper component that allows all of the other React Router components to work. The BrowserRouter component can only have one child element. There are other types of Router components but the BrowserRouter component is the main router we will be using in this course. We can import the BrowserRouter component with:

import { BrowserRouter} from "react-router-dom"
We can reference the BrowserRouter component using the <BrowserRouter> tag:

const BasicExample = () => (
  <BrowserRouter>
    <div> //A Router can only have one child element, so make sure everything goes in the div
      //other React Router components go here
    </div>
  </BrowserRouter>
)
----------------------------------------------------------------------------------
Route
The Route component is probably the most important component out of the React Router library. It is used to render a specific component when a specified URL path occurs. We can import the Route component with:

import { Route } from "react-router-dom"
We can reference the Route component using the <Route> tag. There are three main ways we can render a component using the Route component. Take a look at them below:

    //rendering using a component
    <Route path="/about" component={About}/>
    //rendering using an inline function
    <Route path="/about" render={() => <div>About</div>}/>
    //always rendering, regardless of whether the path matches the URL
    <Route path="/about" children={() => <div>Always rendered</div>}/>

All of the three render methods have a path property that is used to define the path that the component will render on. Be sure to use only one render method per Route component and also be sure to use the Route component inside a BrowserRouter component. Lastly, the Route component will pass a few route properties down to the rendered component, regardless of which method was used. We will cover all of these topics within this lesson.

Here's a live code example on CodeSandbox: https://codesandbox.io/s/vvpow545ll
----------------------------------------------------------------------------------
Path
The path property is used to define the URL path that the component will render on. A Route component with no path property will always trigger a match and render. Matches are determined by doing a regex comparison between the URL path and the path property pattern. However, since it uses a regex match, it is possible for a match to occur even if the URL and the path pattern don't match exactly.

For example if the URL path is “/about/123” then both of the routes shown below will still render because "/about/123" contains both “/” and "/about":

const App = () => (
  <div>
    <BrowserRouter> 
      <div>
        <Route path="/" render={(props) => <div>Home</div>}/> //A URL path of "/about/123" matches because "/about/123" contains "/" 
        <Route path="/about" render={(props) => <div>About</div>}/> //A URL path of "/about/123" matches because "/about/123" contains "/about
      </div>
    </BrowserRouter>
  </div>
);
----------------------------------------------------------------------------------
	Exact
To account for this, be sure to add the exact property if you only want a route to render on an exact match. Trailing slashes on the URL don't factor in to the matching.

      <Route exact path="/" render={(props) => <div>Home</div>}/> // "only a URL path of "/" will match
----------------------------------------------------------------------------------
	  Strict
Use the strict property when you want trailing slashes to factor in to the matching.

      <Route strict path="/about" render={(props) => <div>About</div>}/> // A URL path of "/about" matches but "/about/" doesn't match
----------------------------------------------------------------------------------
	  Render methods
Render method: component
The component property is used to render a component that is already defined. Do not try to provide an inline function to the component property, as this would inefficiently cause a new component to be created every time the route renders. If you want to use an inline function, provide it to the render property instead.

const About = (props) => (
  <div>
    About
  </div>
)

const App = () => (
  <div>
    <BrowserRouter>
      <Route path="/about" component = {About}/>
    </BrowserRouter>
  </div>
);
----------------------------------------------------------------------------------
Render method: render
The render property is used to render an inline function.

const App = () => (
  <div>
    <BrowserRouter>
      <Route path="/about" render={(props) => <div>About</div>}/>
    </BrowserRouter>
  </div>
);
----------------------------------------------------------------------------------
Render method: children
The children property is used when you always need something rendered, regardless of whether or not the current URL matches the specified path. You may be wondering why we need to use a Route component to accomplish this since we can do the same thing using a normal component. The reason is because the Route component passes a few route properties down to the rendered function, which could in the component rendering logic.

const App = () => (
  <div>
    <BrowserRouter>
      <Route path="/about" children={(props) => <div>Always Rendered</div>}/>
    </BrowserRouter>
  </div>
);
----------------------------------------------------------------------------------
Route Properties and URL Parameters
https://codesandbox.io/s/yvq78p6w9
Route properties
All three render methods will have route properties passed down from the Route component. Here are the route properties that are passed down as props:

match
location
history
You can access them through props, just like any other React property:

const About = (props) => {
  console.log(props.match)
  // Object {path: "/about", url: "/about", isExact: true, params: Object}
  console.log(props.location)
  // Object {pathname: "/about", search: "", hash: "", state: undefined}
  console.log(props.history)
  // Object {length: 1, action: "POP", location: Object}
  return (
    <div>
      About
    </div>
)}

const App = () => (
  <div>
    <BrowserRouter>
      <Route path="/about" component = {About}/>
    </BrowserRouter>
  </div>
);

You can also access them through ES6 destructuring:

const App = () => (
  <div>
    <BrowserRouter>
      <Route path="/about" render={ ({match,location,history}) => { 
        console.log(match)
        // Object {path: "/about", url: "/about", isExact: true, params: Object}
        console.log(location)
        // Object {pathname: "/about", search: "", hash: "", state: undefined}
        console.log(history)
        // Object {length: 1, action: "POP", location: Object}
        return (
          <div>About</div>
        )}
      }/>
    </BrowserRouter>
  </div>
);
---------------------------------------------------------------------------------
match
A match object is passed down to all components rendered from Route components as a property. The match object is null when there is no match, but contains useful information when a match occurs. The match object contains the following information about a matched path that caused a component to be rendered:

params (object) - contains key/value pairs of the dynamic segments that are used in the path pattern (e.g. {userId = 123} when path = “/user/:userId” and the URL is "/user/123")
isExact (boolean) - true if the URL is an exact match with the path property
path (string) - the path property of the route component. Useful for building nested routes
url (string) - the matched portion of the URL. Useful for building nested Links
---------------------------------------------------------------------------------
location
A location object is passed down to all components rendered from Route components as a property. The location object contains the following information about the path that was rendered:

pathname (string) - the full path of the URL
search (string) - the URL query string
hash (string) - the URL hash fragment
state (object) - the current state, if a state was provided to history.push(path, [state]), otherwise undefined
---------------------------------------------------------------------------------
history
A history object is passed down to all components rendered from Route components as a property. The history object contains the following information about the path that was rendered:

length (number) - The number of entries in the history stack
action (string) - (PUSH, POP, or REPLACE)
location (object) - see location
It also has the following methods:

push(path, [state]) - (function) Pushes a new entry onto the history
replace(path, [state]) - (function) Replaces the current entry on the history stack
go(n) - (function) Moves the pointer in the history stack by n entries
goBack() - (function) Equivalent to go(-1)
goForward() - (function) Equivalent to go(1)
block(prompt) - (function) Prevents navigation (see the history docs)
---------------------------------------------------------------------------------
URL Parameters
URL parameters are segments of your URL path that can vary and be parsed from the URL. To define a segment of your path to be a URL param, add a colon in front of the segment name:

    <Route path="/userId/:id" render={(props) => <div>Home</div>}/>
The “:id” portion of the URL path can now vary and the route will still match. For example "/userId/123" and “/userId/abc”, will both cause a match.

You can access the URL param value by using the match.params object that is passed down to the rendered component:

const User = ({match}) => {
 return (
   <div>
     UserId: {match.params.id} //this will show the id entered in the URL path
   </div>
)}

const App = () => (
 <div>
   <BrowserRouter>
     <Route path="/userId/:id" component = {User}/>
   </BrowserRouter>
 </div>
);
---------------------------------------------------------------------------------
Nested Routes
It is pretty straight forward to nest Route components within each other. The match.url property is useful if you want to add path segments onto the original matched url. For example, if you want to add additional Route components within a component rendered from an original Route component do the following:

const Info = ({match}) => {
  return (
    <div>
      <Route path="{match.url + "/phone"}" render={(props) => <div>Phone: 123 456 7890</div>}/> // renders when URL = /info/phone
      <Route path="{match.url + "/email"}" render={(props) => <div>Email: email@email.com</div>}/> renders when URL = /info/email
      <Route path="{match.url + "/address"}" render={(props) => <div>Address: 123 Address</div>}/> renders when URL = /info/address
    </div>
)}

const App = () => (
  <div>
    <BrowserRouter>
      <Route path="/info" component = {Info}/>
    </BrowserRouter>
  </div>
);
----------------------------------------------------------------------------------


Link
https://codesandbox.io/s/5z5vz8wjox

The Link component is used to provide a clickable link that will change the URL of the page.

We can import the Link component with:


import { Link } from 'react-router-dom'

We can reference the Link component using the <Link> tag.

<Link to="/somewhere">Somewhere</Link>
----------------------------------------------------------------------------------
to

The Link component has a to property that specifies what the URL will change to when the Link component is clicked. Any string value can be passed to the to property including string values with queries and hashtags.

Example Link Components:

const App = () => (
  <div>
    <BrowserRouter> 
      <Link to="/a/b/c/d">Path</Link>
      <Link to="/#clothes">Hashtag</Link>
      <Link to="/items?id=123">Query</Link>
    </BrowserRouter>
  </div>
);
----------------------------------------------------------------------------------
replace

The Link component has a replace component which causes the Link to replace the current entry in the history stack instead of adding a new one when clicked.

<Link to="somewhere" replace />
----------------------------------------------------------------------------------

NavLink
https://codesandbox.io/s/nr3181z14p
The NavLink component inherits from the component but also adds styling to the component when the NavLink is active. The NavLink is active when the URL matches the NavLink's to property.

We can import the Link component with:


import { NavLink } from 'react-router-dom'

We can reference the NavLink component using the <NavLink> tag.

<NavLink to="/somewhere">Somewhere</NavLink>
---------------------------------------------------------------------------------
activeClassName
The NavLink component has an activeClassName property that specifies a CSS class to be used when the NavLink is active. The default value of the activeClassName property is the active class.

.selected {
    color: red
}
<NavLink to="/somewhere" activeClassName="selected">Somewhere</NavLink>
---------------------------------------------------------------------------------
activeStyle
The NavLink component has an activeStyle property that specifies a CSS style to apply when the NavLink is active.

<NavLink to="/somewhere" activeStyle={{color:'red'}}>Somewhere</NavLink>

or

var style = {color: 'red'}
<NavLink to="/somewhere" activeStyle={style}>Somewhere</NavLink>
---------------------------------------------------------------------------------
exact
The NavLink component has an exact property that only lets the NavLink become active when the location is matched exactly.

<NavLink exact to="/somewhere" activeStyle={{color:'red'}}>Somewhere</NavLink>
---------------------------------------------------------------------------------
strict
The NavLink component has a strict property that causes trailing slashes to be taken into consideration when determining whether the NavLink is active.

<NavLink strict to="/somewhere/" activeStyle={{color:'red'}}>Somewhere</NavLink>
---------------------------------------------------------------------------------
isActive TODO
The NavLink component has an isActive property that triggers a function when the NavLink is active.

const activeEvent = (match, location) => {
    if (!match) {
    return false
  }
    //do something
    console.log("active on : " + match.url)
}
<NavLink to="/somewhere" isActive={activeEvent}>Somewhere</NavLink>

----------------------------------------------------------------------------------
Switches
https://codesandbox.io/s/2vz1lvm6vp
Switch
The Switch component contains several Route components and will exclusively render the first route that is a match. Without a Switch component, multiple Routes may be rendered if multiple matches are detected.

We can import the Switch component with:


import { Switch, Route } from 'react-router-dom'

We can reference the Switch component using the <Switch> tag.

<Switch>
  <Route exact path="/" component={Home}/>
  <Route path="/about" component={About}/>
  <Route path="/users/allUsers" component={User}/>
  <Route path="/users/:id" component={User}/>
</Switch>
----------------------------------------------------------------------------------
Default Route
It is a common practice to have the last Route within a Switch component be a route that always renders. This way, you can display a default component if all other routes fail.

<Switch>
 <Route exact path="/" component={Home}/>
 <Route path="/about" component={About}/>
 <Route path="/users/:id" component={User}/>
 <Route component={DefaultRoute}/> //if no other routes match, this route will render for sure
</Switch>
----------------------------------------------------------------------------------

Redirects
https://codesandbox.io/s/p7lnornyrq
Redirect
The Redirect component will navigate the page to a specified location when rendered.

We can import the Redirect component with:


import { Redirect } from 'react-router-dom'

We can reference the Redirect component using the <Redirect> tag.

   <Redirect to="/login"/>    
----------------------------------------------------------------------------------
Redirect from Routes
Redirect components are often used inside Route components. When the Route is matched, there is often logic that triggers the Redirect component. If you directly render a Redirect component outside of a Route component, it will just navigate the page away immediately.


var validUser = false

const ValidateUser = () => {
    if(validUser){
        return <div>Welcome User</div>
    }
    else{
        return <Redirect to="/error"/>
    }
}

const Login = () => {
    validUser = true
    return <div>Logged In</div> 
}

const Error = () => {
    return <div>Please Log In</div> 
}
<Route exact path="/user" render={ValidateUser}/>
<Route exact path="/error" render={Error}/>
<Route exact path="/login" render={Login}/>
----------------------------------------------------------------------------------
Redirect from Switches
Redirects can also be used inside Switches. To use a Redirect within a Switch component, add a from property to the Redirect component. The Switch component will render the first component that matches, whether it is a Route or a Redirect. The from property can be only used with Redirects that are within Switch components.


<Switch>
  <Route path='/user' component={User}/>
  <Redirect exact from='/' to='/user'/>
  <Redirect from='/oldPageURL' to ='/newPageURL'/>
  <Route component={DefaultPage}/>

</Switch>
----------------------------------------------------------------------------------
push
The Redirect component has a push attribute that will push the redirected URL onto the history stack instead of replacing the current one.

   <Redirect push to="/login"/>    
----------------------------------------------------------------------------------
exact
Just like Route components, the Redirect component has an exact attribute. See the exact section in the Routers and Routes page for more details.
----------------------------------------------------------------------------------
strict

Just like Route components, the Redirect component has a strict attribute. See the strict section in the Routers and Routes page for more details.

------------------------------------------------------------------------------------------------


Prompts
https://codesandbox.io/s/qz7o9rojx6
Prompt
The Prompt component will send a message to the user if the user ever navigates away from the page.

We can import the Prompt component with:


import { Prompt} from 'react-router-dom'

We can reference the Prompt component using the <Prompt> tag.

   <Prompt message="Are you sure you want to leave?"/>   
message
The Prompt component has a message attribute that contains a string that will be displayed to the user when they are attempting to navigate away from the page.

when
The when attribute is a boolean that can be used to enable or disable the Prompt component. Set it to false when you want to disable the Prompt component and allow the user the navigate away without seeing a Prompt. The when attribute is set to true by default.

    var notSaved = true
   <Prompt when={notSaved} message="Are you sure you want to leave without saving?"/>  
   
-----------------------------------------------------------------------------------------------


React Router Summary
In the module you learned how to use React Router to handle your routing needs.

We covered the following components in this module:

BrowserRouter - A wrapper component used to allow other React Router components to work
Route - Used to render a component at a given URL path
Link - Used to change the current URL path when clicked
NavLink - Used to change the current URL path when clicked with styling added to the link text
Switch - Used to render the first Route or Redirect that matches
Redirect - Used to change the URL path when triggered
Prompt - Used to prompt the user when the URL is changed
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------


Personal Website using React Router

https://codesandbox.io/s/q33vzw6z8j
In this tutorial lab, we will be building a personal website using React Router. Here is an example of what it should look like at the end:

https://codesandbox.io/s/3qp8q073q

Here are a list of features our application will have:

Navigation Bar with links to About, Resume, Projects, and Contacts
Step 1. Setting up your project
In this step, we will set up the project structure so that you can keep your project organized. A completed example of this step can be found here : https://codesandbox.io/s/p9wzm674oj

Go to https://codesandbox.io/s/new to create a new React project.
Fork the project so that you can save it to your account.
Give the project a title such as “Personal Website using React Router”
Add react-router-dom as a dependency.
Create a new folder inside the src folder. Name it components.
Create a new file inside the components folder. Name it App.jsx
Copy the following inside App.jsx:

import React from "react";
import { BrowserRouter } from "react-router-dom";

const App = () => {
  return (
    <BrowserRouter>
      <div>
        <h1>Hello World</h1>
      </div>
    </BrowserRouter>
  );
};

export default App;

The App component contains our entire app. We must include the BrowserRouter component so that other React Router components can work in the future.

Inside index.js, delete the existing App component and instead import App from ./components/app.jsx:

import React from "react";
import ReactDOM from "react-dom";
import "./styles.css";
import App from "./components/App.jsx";

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);


The screen should display Hello World. You are now ready for the next step.
Step 2. Creating the NavBar
In this step, we will be creating the NavBar component which will allow us to navigate to different sections of our application. A completed example of this step can be found here : https://codesandbox.io/s/0oy7ro513n

Create a new file inside components. Name it NavTab.jsx. This will be a component that represents an individual tab on the NavBar.
Copy the following inside NavTab.jsx:
import React from "react";
import { NavLink } from "react-router-dom";

const NavTab = props => {
  var activeStyle = {
    color: "green",
    fontWeight: "bold"
  };

  var navStyle = {
    margin: "10px"
  };
  return (
    <NavLink style={navStyle} activeStyle={activeStyle} to={props.to}>
      {props.label}
    </NavLink>
  );
};

export default NavTab;
The NavTab component is just a NavLink component with some style and an activeStyle attribute that makes it turn green and bold when it is active. Its to attribute is passed down as a props and will determine where it will link to. Its label is also passed down as a props.

Create a new file inside components. Name it NavBar.jsx:

Copy the following inside NavBar.jsx:


import React from "react";
import NavTab from "./NavTab.jsx";

const NavBar = () => {
  return (
    <div>
      <NavTab to="/about" label="About" />
      <NavTab to="/resume" label="Resume" />
      <NavTab to="/projects" label="Projects" />
      <NavTab to="/contact" label="Contact" />
    </div>
  );
};

export default NavBar
The NavBar component contains several NavTab components and provides them with a couple of properties that will define where they are linked to and how they are labeled.

Now import the NavBar component into App.jsx and render it to test it out:
import React from "react";
import { BrowserRouter } from "react-router-dom";
import NavBar from "./NavBar.jsx";

const App = () => {
  return (
    <BrowserRouter>
      <div>
        <NavBar />
      </div>
    </BrowserRouter>
  );
};

export default App;

The screen should now show a Navigation bar. Clinking on the links should take you to /about, /resume, /projects and /contact. Try it out!
Step 3. Implementing the About, Resume, and Error components
In this step, we will be creating the About and Resume components that will be rendered when we click on the different links. A completed example of this step can be found here : https://codesandbox.io/s/7wvy84wq0j.

Create a new file inside the components folder. Name it About.jsx.
Copy the following inside About.jsx:
import React from "react";

const About = () => {
  return <h2>My name is YOUR NAME and I am a React Developer.</h2>;
};

export default About;

The About component is just a simple component that just displays some text. Try importing and rendering it individually within App.jsx to test if it works.

Create a new file inside the components folder. Name it Resume.jsx.
Copy the following inside Resume.jsx:
import React from "react";

const Resume = () => {
  return (
    <div>
      <h1>YOUR NAME</h1>
      <h2>Education</h2>
      <h3>YOUR SCHOOL</h3>
      <ul>
        <li>Bachelors of Science in Computer Engineering</li>
        <li>Class of 20XX</li>
        <li>GPA: X</li>
      </ul>
      <h2>Work History</h2>
      <h3>YOUR JOB TITLE</h3>
      <ul>
        <li>JOB DESCRIPTION 2</li>
        <li>JOB DESCRIPTION 1</li>
      </ul>
      <h2>Skills</h2>
      <ul>
        <li>React.js</li>
        <li>React Router</li>
        <li>Node.js</li>
        <li>SKILL</li>
      </ul>
    </div>
  );
};

export default Resume;
The Resume component is just a bunch of basic HTML. Feel free to edit edit the structure to make it your own. Try importing rendering it individually within App.jsx to test if it works.

Create a new file inside the components folder. Name it Error.jsx.
Copy the following inside Error.jsx:
import React from "react";

const Error = () => {
  return <h2>Error: Invalid URL</h2>;
};

export default Error;

The Error component is used to display an error when the user navigates to an invalid page url.

Import the Resume, About, Resume and Error components into App.jsx. Next add a Switch component and a couple of Route and Redirects components to App.jsx.
import React from "react";
import { BrowserRouter, Switch, Redirect, Route } from "react-router-dom";
import NavBar from "./NavBar.jsx";
import About from "./About.jsx";
import Resume from "./Resume.jsx";
import Error from "./Error.jsx";

const App = () => {
  return (
    <BrowserRouter>
      <div>
        <NavBar />
        <Switch>
          <Redirect exact path="/" to="/about" />
          <Route path="/about" component={About} />
          <Route path="/resume" component={Resume} />
          <Route path="/projects" component={null} />
          <Route path="/contact" component={null} />
          <Route component={Error} />
        </Switch>
      </div>
    </BrowserRouter>
  );
};

export default App;



Make sure to import all the components you need from the react-router-dom library. The Switch component will render the first Route or Redirect that matches. The Route components will each render a specific component relating the to the URL. Insert the About and Resume components into the component attribute of the ./about and ./resume Route components. Leave the other components null for now. We will implement those in the next steps.

Test out the app by clicking the links. You should see the About and Resume components render when you go to the appropriate links. You should also see the Error component render when you navigate to an invalid URL.
Step 4. Implementing the Projects component
In this step, we will be creating the Projects component and the Contact component. A completed example of this step can be found here : https://codesandbox.io/s/3qp8q073q

Create a new file inside the components folder. Name it Projects.jsx.

Copy the following inside Projects.jsx:

import React from "react";
import { Link, Switch, Route } from "react-router-dom";

const Projects = ({ match }) => {
  return (
    <div>
      <ul>
        <li>
          <Link to={match.url + "/game_project"}>Game Project</Link>
        </li>
        <li>
          <Link to={match.url + "/react_project"}>React Project</Link>
        </li>
        <li>
          <Link to={match.url + "/database_project"}>Database Project</Link>
        </li>
        <li>
          <Link to={match.url + "/machine_learning_project"}>
            Machine Learning Project
          </Link>
        </li>
      </ul>
      <Switch>
        <Route path={match.url + "/:projectName"} render = { ({match}) => <div>{match.params.projectName}</div>} />

        <Route
          exact
          path={match.url}
          render={() => <div>Pick a project to view!</div>}
        />
      </Switch>
    </div>
  );
};

export default Projects;

The Projects component will contain several Links and Routes to individual projects. match.url is used to append the additional URL segments to whatever base URL was used to render the Projects component. This way, if the base url changes, the Link and Route paths will still work correctly. Currently, there are only two Routes. The first route will match when the user visits projects/:projectName. It will simply display the projectName URL parameter, which is the second segment of the URL path. For example, if the URL is projects/myCoolProject, it will display myCoolProject. The second route will render a simple text statement when the URL is exactly /projects.

Create a new file inside the components folder. Name it Contact.jsx.

Copy the following inside Contact.jsx:


import React from "react";
import { Prompt } from "react-router-dom";

class Contact extends React.Component {
  constructor(props) {
    super(props);
    this.state = { value: "" };
  }
  handleChange(event) {
    this.setState({ value: event.target.value });
  }
  handleSubmit() {
    this.setState({ value: "" });
  }
  render() {
    var style = {
      width: 300,
      height: 60,
      margin: 10
    };
    return (
      <div>
        <input
          value={this.state.value}
          onChange={this.handleChange.bind(this)}
          style={style}
        />
        <div>
          <button onClick={this.handleSubmit.bind(this)}>Send</button>
        </div>
        <Prompt
          when={this.state.value !== ""}
          message="are you sure you want to leave without sending a message?"
        />
      </div>
    );
  }
}

export default Contact;

The Contact component contains a input form and because of that it must be a controlled component and must handle its own state. This is done by first updating the component state whenever there is an onChange event. To finalize this, the input display value is tied to the component state. This will ensure that the component state is always being displayed in the input form and that any changes to the input form will be reflected in the state.

There is also a Prompt component that will prompt the user when they try to navigate away and the form is filled out and not submitted. Since we have a controlled component, we can easily access the state from the input form and check if its empty or not.

Import the Projects and Contact components into App.jsx and add them into the appropriate Routes:

import React from "react";
import { BrowserRouter, Switch, Redirect, Route } from "react-router-dom";
import NavBar from "./NavBar.jsx";
import About from "./About.jsx";
import Resume from "./Resume.jsx";
import Error from "./Error.jsx";
import Projects from "./Projects.jsx";
import Contact from "./Contact.jsx";

const App = () => {
  return (
    <BrowserRouter>
      <div>
        <NavBar />
        <Switch>
          <Redirect exact path="/" to="/about" />
          <Route path="/about" component={About} />
          <Route path="/resume" component={Resume} />
          <Route path="/projects" component={Projects} />
          <Route path="/contact" component={Contact} />
          <Route component={Error} />
        </Switch>
      </div>
    </BrowserRouter>
  );
};

export default App;


You are all finished! Test out the application by clicking all the links to see different components rendered at different routes. Try clicking the additional links that appear when you visit ./Projects. Also try filling out the form and navigating away without pressing submit in ./Contact.